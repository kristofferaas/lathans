---
description: 
globs: 
alwaysApply: false
---
# shadcn/ui Component Library Rules

This project uses `@shadcn/ui` for UI components. These are beautifully designed, accessible components built on top of Radix UI primitives and styled with Tailwind CSS.

## Core Principles

- **Copy, don't install**: shadcn/ui components are copied into your project, giving you full control
- **Accessibility first**: All components follow WCAG guidelines and use proper ARIA attributes
- **Customizable**: Components can be modified to fit your design system
- **TypeScript native**: Full TypeScript support with proper type definitions
- **Composition over configuration**: Build complex UIs by composing simple components

## Project Structure

Components are organized in the following structure:
```
src/
├── components/
│   ├── ui/           # shadcn/ui components (auto-generated)
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   ├── input.tsx
│   │   └── ...
│   └── custom/       # Your custom components
├── lib/
│   └── utils.ts      # Utility functions including cn()
└── styles/
    └── globals.css   # Global styles and CSS variables
```

## Installation and Setup

### Adding New Components

Use the shadcn CLI to add components:

```bash
# Add a single component
npx shadcn@latest add button
```

**Note**: Always use `npx shadcn@latest` (the older `npx shadcn-ui@latest` is deprecated).

## Import Patterns

### Standard Component Imports

Always import components from the `@/components/ui` directory:

```tsx
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
```

### Utility Imports

Import the `cn` utility for conditional classes:

```tsx
import { cn } from "@/lib/utils"
```

## Component Usage Patterns

### Button Component

```tsx
import { Button } from "@/components/ui/button"

// Basic usage
<Button>Click me</Button>

// With variants
<Button variant="destructive">Delete</Button>
<Button variant="outline">Cancel</Button>
<Button variant="ghost">Ghost</Button>
<Button variant="link">Link</Button>

// With sizes
<Button size="sm">Small</Button>
<Button size="lg">Large</Button>

// With custom styling
<Button className="w-full">Full width</Button>
```

### Card Component

```tsx
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"

<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card description goes here</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card content</p>
  </CardContent>
  <CardFooter>
    <Button>Action</Button>
  </CardFooter>
</Card>
```

### Form Components (with React Hook Form)

**Always use React Hook Form for form handling**. This provides better performance, validation, and user experience:

```tsx
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

const formSchema = z.object({
  email: z.string().email("Please enter a valid email"),
  message: z.string().min(10, "Message must be at least 10 characters"),
})

type FormData = z.infer<typeof formSchema>

function ContactForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<FormData>({
    resolver: zodResolver(formSchema),
  })

  const onSubmit = async (data: FormData) => {
    // Handle form submission
    console.log(data)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="email">Email</Label>
        <Input
          id="email"
          type="email"
          placeholder="Enter your email"
          {...register("email")}
          className={errors.email ? "border-red-500" : ""}
        />
        {errors.email && (
          <p className="text-sm text-red-500">{errors.email.message}</p>
        )}
      </div>
      <div className="space-y-2">
        <Label htmlFor="message">Message</Label>
        <Textarea
          id="message"
          placeholder="Enter your message"
          {...register("message")}
          className={errors.message ? "border-red-500" : ""}
        />
        {errors.message && (
          <p className="text-sm text-red-500">{errors.message.message}</p>
        )}
      </div>
      <Button type="submit" disabled={isSubmitting}>
        {isSubmitting ? "Sending..." : "Send Message"}
      </Button>
    </form>
  )
}

### Dialog/Modal Pattern

```tsx
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"

<Dialog>
  <DialogTrigger asChild>
    <Button variant="outline">Open Dialog</Button>
  </DialogTrigger>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Dialog Title</DialogTitle>
      <DialogDescription>Dialog description</DialogDescription>
    </DialogHeader>
    <div className="py-4">
      {/* Dialog content */}
    </div>
    <DialogFooter>
      <Button variant="outline">Cancel</Button>
      <Button>Confirm</Button>
    </DialogFooter>
  </DialogContent>
</Dialog>
```

## Available Components

### Layout & Navigation
- **Accordion**: Collapsible content sections
- **NavigationMenu**: Complex navigation with dropdowns
- **Menubar**: Application menu bar
- **Breadcrumb**: Navigation breadcrumbs
- **Pagination**: Page navigation controls

### Data Display
- **Table**: Data tables with sorting and filtering
- **Card**: Content containers
- **Avatar**: User profile images
- **Badge**: Status indicators and labels
- **Separator**: Visual dividers

### Form Controls
- **Button**: Primary actions and interactions
- **Input**: Text input fields
- **Textarea**: Multi-line text input
- **Select**: Dropdown selection
- **Checkbox**: Boolean input
- **RadioGroup**: Single selection from options
- **Switch**: Toggle controls
- **Slider**: Range input
- **DatePicker**: Date selection (requires date-fns)

### Feedback & Overlays
- **Dialog**: Modal dialogs
- **Sheet**: Slide-out panels
- **Popover**: Floating content
- **Tooltip**: Contextual information
- **Alert**: Important messages
- **AlertDialog**: Confirmation dialogs
- **Toast**: Temporary notifications, use `Sonner` component instead of toast
- **Progress**: Loading indicators
- **Skeleton**: Loading placeholders

### Utility Components
- **Command**: Command palette/search
- **ContextMenu**: Right-click menus
- **DropdownMenu**: Action menus
- **HoverCard**: Hover-triggered content
- **ScrollArea**: Custom scrollbars
- **Collapsible**: Show/hide content
- **AspectRatio**: Maintain aspect ratios
- **Resizable**: Resizable panels

## Styling Guidelines

### Using CSS Variables

shadcn/ui uses CSS variables for theming. Define your colors in `globals.css`:

```css
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;
  /* ... other variables */
}

.dark {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;
  /* ... dark mode variables */
}
```

### Custom Styling

Use the `cn` utility to merge classes conditionally:

```tsx
import { cn } from "@/lib/utils"

interface ButtonProps {
  variant?: "default" | "destructive" | "outline"
  className?: string
}

function CustomButton({ variant = "default", className, ...props }: ButtonProps) {
  return (
    <button
      className={cn(
        "base-button-classes",
        {
          "destructive-classes": variant === "destructive",
          "outline-classes": variant === "outline",
        },
        className
      )}
      {...props}
    />
  )
}
```

### Extending Components

Create wrapper components for consistent styling:

```tsx
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

interface PrimaryButtonProps extends React.ComponentProps<typeof Button> {
  children: React.ReactNode
}

export function PrimaryButton({ className, children, ...props }: PrimaryButtonProps) {
  return (
    <Button
      className={cn("bg-blue-600 hover:bg-blue-700 text-white", className)}
      {...props}
    >
      {children}
    </Button>
  )
}
```

## Accessibility Best Practices

### Keyboard Navigation
- Ensure all interactive elements are keyboard accessible
- Use proper tab order with `tabIndex` when needed
- Implement arrow key navigation for complex components

### ARIA Attributes
- Use semantic HTML elements when possible
- Add ARIA labels for screen readers
- Implement proper focus management

```tsx
<Button
  aria-label="Close dialog"
  aria-describedby="dialog-description"
>
  <X className="h-4 w-4" />
</Button>
```

### Color and Contrast
- Ensure sufficient color contrast (4.5:1 for normal text)
- Don't rely solely on color to convey information
- Test with color blindness simulators

## Form Handling with React Hook Form

**React Hook Form is the preferred and recommended approach for all form handling in this project.** It provides:

- Better performance with minimal re-renders
- Built-in validation with Zod integration
- Excellent TypeScript support
- Better accessibility and user experience
- Easier testing

### Basic Form Setup

```tsx
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

const formSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
})

function LoginForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  })

  const onSubmit = async (data: z.infer<typeof formSchema>) => {
    try {
      // Handle form submission
      await loginUser(data)
      reset() // Reset form after successful submission
    } catch (error) {
      console.error("Login failed:", error)
    }
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="email">Email</Label>
        <Input
          id="email"
          type="email"
          placeholder="Enter your email"
          {...register("email")}
          className={errors.email ? "border-red-500" : ""}
        />
        {errors.email && (
          <p className="text-sm text-red-500">{errors.email.message}</p>
        )}
      </div>
      <div className="space-y-2">
        <Label htmlFor="password">Password</Label>
        <Input
          id="password"
          type="password"
          placeholder="Enter your password"
          {...register("password")}
          className={errors.password ? "border-red-500" : ""}
        />
        {errors.password && (
          <p className="text-sm text-red-500">{errors.password.message}</p>
        )}
      </div>
      <Button type="submit" disabled={isSubmitting} className="w-full">
        {isSubmitting ? "Signing in..." : "Sign in"}
      </Button>
    </form>
  )
}
```

### Advanced Form Patterns

#### Form with Select and Checkbox Components

```tsx
import { useForm, Controller } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"

const profileSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  role: z.string().min(1, "Please select a role"),
  notifications: z.boolean().default(false),
})

type ProfileFormData = z.infer<typeof profileSchema>

function ProfileForm() {
  const {
    register,
    handleSubmit,
    control,
    formState: { errors, isSubmitting },
  } = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      name: "",
      role: "",
      notifications: false,
    },
  })

  const onSubmit = async (data: ProfileFormData) => {
    // Handle form submission
    console.log(data)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="name">Name</Label>
        <Input
          id="name"
          placeholder="Enter your name"
          {...register("name")}
          className={errors.name ? "border-red-500" : ""}
        />
        {errors.name && (
          <p className="text-sm text-red-500">{errors.name.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="role">Role</Label>
        <Controller
          name="role"
          control={control}
          render={({ field }) => (
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <SelectTrigger className={errors.role ? "border-red-500" : ""}>
                <SelectValue placeholder="Select a role" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="admin">Admin</SelectItem>
                <SelectItem value="user">User</SelectItem>
                <SelectItem value="moderator">Moderator</SelectItem>
              </SelectContent>
            </Select>
          )}
        />
        {errors.role && (
          <p className="text-sm text-red-500">{errors.role.message}</p>
        )}
      </div>

      <div className="flex items-center space-x-2">
        <Controller
          name="notifications"
          control={control}
          render={({ field }) => (
            <Checkbox
              id="notifications"
              checked={field.value}
              onCheckedChange={field.onChange}
            />
          )}
        />
        <Label htmlFor="notifications">Enable notifications</Label>
      </div>

      <Button type="submit" disabled={isSubmitting}>
        {isSubmitting ? "Saving..." : "Save Profile"}
      </Button>
    </form>
  )
}
```

#### Form with Dynamic Fields

```tsx
import { useForm, useFieldArray } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Plus, Trash2 } from "lucide-react"

const dynamicFormSchema = z.object({
  title: z.string().min(1, "Title is required"),
  items: z.array(z.object({
    name: z.string().min(1, "Item name is required"),
    quantity: z.number().min(1, "Quantity must be at least 1"),
  })).min(1, "At least one item is required"),
})

type DynamicFormData = z.infer<typeof dynamicFormSchema>

function DynamicForm() {
  const {
    register,
    handleSubmit,
    control,
    formState: { errors, isSubmitting },
  } = useForm<DynamicFormData>({
    resolver: zodResolver(dynamicFormSchema),
    defaultValues: {
      title: "",
      items: [{ name: "", quantity: 1 }],
    },
  })

  const { fields, append, remove } = useFieldArray({
    control,
    name: "items",
  })

  const onSubmit = async (data: DynamicFormData) => {
    console.log(data)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="title">Title</Label>
        <Input
          id="title"
          placeholder="Enter title"
          {...register("title")}
          className={errors.title ? "border-red-500" : ""}
        />
        {errors.title && (
          <p className="text-sm text-red-500">{errors.title.message}</p>
        )}
      </div>

      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <Label>Items</Label>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => append({ name: "", quantity: 1 })}
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Item
          </Button>
        </div>

        {fields.map((field, index) => (
          <div key={field.id} className="flex gap-2 items-end">
            <div className="flex-1 space-y-2">
              <Label htmlFor={`items.${index}.name`}>Name</Label>
              <Input
                placeholder="Item name"
                {...register(`items.${index}.name`)}
                className={errors.items?.[index]?.name ? "border-red-500" : ""}
              />
              {errors.items?.[index]?.name && (
                <p className="text-sm text-red-500">
                  {errors.items[index]?.name?.message}
                </p>
              )}
            </div>
            <div className="w-24 space-y-2">
              <Label htmlFor={`items.${index}.quantity`}>Qty</Label>
              <Input
                type="number"
                min="1"
                {...register(`items.${index}.quantity`, { valueAsNumber: true })}
                className={errors.items?.[index]?.quantity ? "border-red-500" : ""}
              />
            </div>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => remove(index)}
              disabled={fields.length === 1}
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
        ))}
        {errors.items && (
          <p className="text-sm text-red-500">{errors.items.message}</p>
        )}
      </div>

      <Button type="submit" disabled={isSubmitting}>
        {isSubmitting ? "Submitting..." : "Submit"}
      </Button>
    </form>
  )
}
```

### Form Validation Best Practices

1. **Always use Zod for schema validation** - provides runtime type safety
2. **Provide clear error messages** - help users understand what went wrong
3. **Use defaultValues** - prevents uncontrolled to controlled component warnings
4. **Handle loading states** - disable submit button and show loading text
5. **Reset forms after successful submission** - use `reset()` method
6. **Use Controller for complex components** - Select, Checkbox, custom components

### Required Dependencies

Make sure to install the necessary packages:

```bash
npm install react-hook-form @hookform/resolvers zod
```

## Dark Mode Support

shadcn/ui components automatically support dark mode through CSS variables:

```tsx
// Add to your root layout or app component
import { ThemeProvider } from "next-themes"

function App({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
      {children}
    </ThemeProvider>
  )
}
```

## Performance Considerations

### Tree Shaking
- Import only the components you need
- Use named imports to enable tree shaking
- Avoid importing entire component libraries

### Bundle Size
- Monitor bundle size when adding new components
- Consider lazy loading for large components
- Use dynamic imports for rarely used components

```tsx
import dynamic from 'next/dynamic'

const HeavyComponent = dynamic(() => import('@/components/ui/data-table'), {
  loading: () => <div>Loading...</div>
})
```

## Testing Guidelines

### Component Testing

```tsx
import { render, screen } from '@testing-library/react'
import { Button } from '@/components/ui/button'

test('renders button with correct text', () => {
  render(<Button>Click me</Button>)
  expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument()
})

test('applies variant classes correctly', () => {
  render(<Button variant="destructive">Delete</Button>)
  expect(screen.getByRole('button')).toHaveClass('bg-destructive')
})
```

### Accessibility Testing

```tsx
import { render } from '@testing-library/react'
import { axe, toHaveNoViolations } from 'jest-axe'

expect.extend(toHaveNoViolations)

test('should not have accessibility violations', async () => {
  const { container } = render(<Button>Accessible button</Button>)
  const results = await axe(container)
  expect(results).toHaveNoViolations()
})
```

## Common Patterns

### Loading States

```tsx
import { Button } from "@/components/ui/button"
import { Loader2 } from "lucide-react"

<Button disabled={isLoading}>
  {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
  {isLoading ? "Loading..." : "Submit"}
</Button>
```

### Error States

```tsx
import { Alert, AlertDescription } from "@/components/ui/alert"
import { AlertCircle } from "lucide-react"

{error && (
  <Alert variant="destructive">
    <AlertCircle className="h-4 w-4" />
    <AlertDescription>{error.message}</AlertDescription>
  </Alert>
)}
```

### Responsive Design

```tsx
import { Button } from "@/components/ui/button"

<Button className="w-full sm:w-auto">
  Responsive Button
</Button>

<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* Responsive grid */}
</div>
```
